<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogmarks (Posts about json)</title><link>https://chris48s.github.io/blogmarks/</link><description></description><atom:link href="https://chris48s.github.io/blogmarks/categories/json.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2024 chris48s</copyright><lastBuildDate>Sun, 21 Apr 2024 18:41:09 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using jq to format JSON on the clipboard</title><link>https://chris48s.github.io/blogmarks/posts/2021/jsontidy/</link><dc:creator>chris48s</dc:creator><description>&lt;p&gt;&lt;a href="https://stedolan.github.io/jq/"&gt;Jq&lt;/a&gt; is a great tool. I use it frequently, but &lt;a href="https://sequoia.makes.software/parsing-json-at-the-cli-a-practical-introduction-to-jq-and-more/"&gt;this recent article&lt;/a&gt; from Sequoia McDowell still has some great tips in it. Well worth a read. One thing that stood out to me from this post was the snippet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I like this pretty-printing/formatting capability so much, I have an alias that formats JSON I've copied (in my OS "clipboard") &amp;amp; puts it back in my clipboard:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alias jsontidy="pbpaste | jq '.' | pbcopy"&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That's crazy-useful, but I need to tweak it a bit. Firstly, as noted, &lt;code&gt;pbcopy&lt;/code&gt; and &lt;code&gt;pbpaste&lt;/code&gt; are mac utils. No worries. We can substitute &lt;code&gt;xclip&lt;/code&gt; on Linux:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;xclip&lt;span class="w"&gt; &lt;/span&gt;-selection&lt;span class="w"&gt; &lt;/span&gt;clipboard&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;xclip&lt;span class="w"&gt; &lt;/span&gt;-selection&lt;span class="w"&gt; &lt;/span&gt;clipboard
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I spotted a minor problem here though: If I run this and the text on my clipboard isn't JSON then &lt;code&gt;jq&lt;/code&gt; will exit with a non-zero code, output something like &lt;code&gt;parse error: Invalid numeric literal at line 1, column 6&lt;/code&gt; to stderr and nothing to stdout. Pipe doesn't care about the non-zero exit code though so we overwrite whatever was on the clipboard with an empty string. So lets add a bit of error handing:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;jsontidy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"xclip -selection clipboard -o | (jq '.' || xclip -selection clipboard -o) | xclip -selection clipboard"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now &lt;code&gt;jsontidy&lt;/code&gt; will format whatever is on the clipboard if it can parse as JSON but leave it alone otherwise.&lt;/p&gt;</description><category>json</category><category>terminal</category><guid>https://chris48s.github.io/blogmarks/posts/2021/jsontidy/</guid><pubDate>Thu, 07 Jan 2021 00:00:00 GMT</pubDate></item><item><title>Post JSON to an API with curl</title><link>https://chris48s.github.io/blogmarks/posts/2020/curl-json/</link><dc:creator>chris48s</dc:creator><description>&lt;p&gt;Increasingly this is becoming just a place to store snippets and one-liners that are a bit too long to remember.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;curl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://my-api/endpoint"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-X&lt;span class="w"&gt; &lt;/span&gt;POST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Accept: application/json"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Authorization: f00ba2"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--data&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'{"my": "payload", "foo": "bar"}'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--include
&lt;/pre&gt;&lt;/div&gt;</description><category>curl</category><category>json</category><category>terminal</category><guid>https://chris48s.github.io/blogmarks/posts/2020/curl-json/</guid><pubDate>Tue, 22 Sep 2020 23:00:00 GMT</pubDate></item><item><title>gron</title><link>https://chris48s.github.io/blogmarks/posts/2020/gron/</link><dc:creator>chris48s</dc:creator><description>&lt;p&gt;&lt;a href="https://github.com/tomnomnom/gron"&gt;gron&lt;/a&gt; makes JSON greppable. I'm late to the party on &lt;code&gt;gron&lt;/code&gt;, but its already found itself a home in my toolchain. It flattens JSON into valid javascript statements (useful in itself) and makes it easier to process JSON with standard unix command line tools.&lt;/p&gt;</description><category>json</category><category>terminal</category><guid>https://chris48s.github.io/blogmarks/posts/2020/gron/</guid><pubDate>Sat, 08 Aug 2020 23:00:00 GMT</pubDate></item></channel></rss>