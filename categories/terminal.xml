<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogmarks (Posts about terminal)</title><link>https://chris48s.github.io/blogmarks/</link><description></description><atom:link href="https://chris48s.github.io/blogmarks/categories/terminal.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2024 chris48s</copyright><lastBuildDate>Tue, 09 Jan 2024 11:28:40 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Three Rich tips</title><link>https://chris48s.github.io/blogmarks/posts/2022/rich-tips/</link><dc:creator>chris48s</dc:creator><description>&lt;p&gt;I've mentioned Will McGugan's excellent library &lt;a href="https://github.com/willmcgugan/rich"&gt;Rich&lt;/a&gt; on this blog before. It is a great tool for building nice terminal interfaces, but it is also an important local development tool. Here's three top tips:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rich can be registered as a &lt;a href="https://rich.readthedocs.io/en/stable/traceback.html#traceback-handler"&gt;handler to render stacktraces&lt;/a&gt;. As well as the aesthetics, using Rich to handle stacktraces like this provides additional context which improves the usefulness of error messages in comparison to python's default handler.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Textualize/rich#rich-inspect"&gt;Rich.inspect&lt;/a&gt; can be used to examine a python object at runtime. I used to use &lt;code&gt;dir()&lt;/code&gt; or &lt;code&gt;vars()&lt;/code&gt; for this, but &lt;code&gt;rich.inspect()&lt;/code&gt; is a big step up.&lt;/li&gt;
&lt;li&gt;Rich can be used as a log handler. &lt;a href="https://rich.readthedocs.io/en/stable/logging.html"&gt;The docs&lt;/a&gt; cover how to use it with python's &lt;code&gt;logging&lt;/code&gt; module, but Will has also published this &lt;a href="https://www.willmcgugan.com/blog/tech/post/richer-django-logging/"&gt;blog post&lt;/a&gt; showing how to configure Django to use Rich as the default log handler.&lt;/li&gt;
&lt;/ol&gt;</description><category>python</category><category>terminal</category><guid>https://chris48s.github.io/blogmarks/posts/2022/rich-tips/</guid><pubDate>Sun, 13 Feb 2022 00:00:00 GMT</pubDate></item><item><title>Learnings from a year on Heroku</title><link>https://chris48s.github.io/blogmarks/posts/2021/heroku-1year/</link><dc:creator>chris48s</dc:creator><description>&lt;p&gt;We migrated &lt;a href="https://shields.io/"&gt;shields.io&lt;/a&gt; to Heroku just over a year ago. Heroku is a great platform but through the process of running a high-traffic application (on a busy day we serve ~30 million requests) I've got to know some of the idiosyncrasies of the platform. In this post I will run through a few of the esoteric details that have surprised me along the way as I've discovered them.&lt;/p&gt;
&lt;h3&gt;ðŸ“… Daily Restarts&lt;/h3&gt;
&lt;p&gt;Heroku's dyno manager restarts or cycles your dynos &lt;a href="https://devcenter.heroku.com/articles/dynos#automatic-dyno-restarts"&gt;once per day&lt;/a&gt;. This behaviour is non-configurable. With the default settings, these daily restarts may also lead to a bit of downtime due to Heroku's default dyno lifecycle, which leads us to..&lt;/p&gt;
&lt;h3&gt;ðŸ”› Preboot&lt;/h3&gt;
&lt;p&gt;A surprising default behaviour of Heroku is that when you deploy or restart (or Heroku restarts your dyno for you), Heroku stops the existing set of web dynos before starting the new ones. Turning on the &lt;a href="https://devcenter.heroku.com/articles/preboot#enabling-and-disabling-preboot"&gt;preboot feature&lt;/a&gt; means Heroku will ensure the new dynos are receiving traffic before shutting down the old ones.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;heroku&lt;span class="w"&gt; &lt;/span&gt;features:enable&lt;span class="w"&gt; &lt;/span&gt;preboot&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;myapp&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;ðŸ’¥ Crash Restart Policy&lt;/h3&gt;
&lt;p&gt;Sometimes bugs hit production. In the case that your application crashes, for whatever reason, Heroku will automatically restart the dyno for you but it implements a &lt;a href="https://devcenter.heroku.com/articles/dynos#dyno-crash-restart-policy"&gt;backoff policy&lt;/a&gt;. In some cases this can lead to a situation where some of your dynos are spending over 5 hours not serving any traffic because they are in a cool-off period instead of recovering immediately. If this happens, the Heroku web UI will report you are running N dynos even when less than N of them are able to actively serve traffic because some are in a cool-off period waiting to start. Running&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;heroku&lt;span class="w"&gt; &lt;/span&gt;ps&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;myapp&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;does tell you which dynos are up and which (if any) are crashed. This brings us on to the next point..&lt;/p&gt;
&lt;h3&gt;ðŸ‘‘ The CLI is King&lt;/h3&gt;
&lt;p&gt;If you're planning on working with Heroku in any depth, you need to get familiar with &lt;a href="https://devcenter.heroku.com/articles/heroku-cli"&gt;the CLI&lt;/a&gt;. There are certain operations which can be performed via the CLI or API which just aren't available via the Web UI or where the CLI allows you to see more detailed information than the Web UI can show you. Fortunately Heroku's CLI app is very high quality. The &lt;code&gt;--help&lt;/code&gt; is very discoverable and it includes examples as well as a reference. This makes it really easy to just jump in and work things out as you go.&lt;/p&gt;
&lt;p&gt;I've already hinted at &lt;code&gt;heroku features&lt;/code&gt; earlier in the post, but there are a variety of useful flags which can be listed with&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;heroku&lt;span class="w"&gt; &lt;/span&gt;features&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;myapp&amp;gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# stable&lt;/span&gt;
heroku&lt;span class="w"&gt; &lt;/span&gt;labs&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;myapp&amp;gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# experemental&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Many of these also can't be enabled/disabled via the Web UI.&lt;/p&gt;</description><category>devops</category><category>heroku</category><category>terminal</category><guid>https://chris48s.github.io/blogmarks/posts/2021/heroku-1year/</guid><pubDate>Sat, 22 May 2021 23:00:00 GMT</pubDate></item><item><title>git --word-diff</title><link>https://chris48s.github.io/blogmarks/posts/2021/git-word-diff/</link><dc:creator>chris48s</dc:creator><description>&lt;p&gt;Git's default diff behaviour can make it difficult to parse edits to long lines of text. This is often an issue when editing documentation&lt;/p&gt;
&lt;p&gt;&lt;img alt="unhelpful git diff" src="https://chris48s.github.io/blogmarks/images/word-diff1.png"&gt;
&lt;em&gt;Thanks git, but what actually changed?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In these situations, the &lt;a href="https://git-scm.com/docs/git-diff#Documentation/git-diff.txt---word-diffltmodegt"&gt;&lt;code&gt;--word-diff&lt;/code&gt;&lt;/a&gt; option can be used to generate a diff that is easier to read.&lt;/p&gt;
&lt;p&gt;&lt;img alt="helpful git diff" src="https://chris48s.github.io/blogmarks/images/word-diff2.png"&gt;
&lt;em&gt;Aah that's better!&lt;/em&gt;&lt;/p&gt;</description><category>git</category><category>terminal</category><guid>https://chris48s.github.io/blogmarks/posts/2021/git-word-diff/</guid><pubDate>Thu, 25 Feb 2021 00:00:00 GMT</pubDate></item><item><title>Using jq to format JSON on the clipboard</title><link>https://chris48s.github.io/blogmarks/posts/2021/jsontidy/</link><dc:creator>chris48s</dc:creator><description>&lt;p&gt;&lt;a href="https://stedolan.github.io/jq/"&gt;Jq&lt;/a&gt; is a great tool. I use it frequently, but &lt;a href="https://sequoia.makes.software/parsing-json-at-the-cli-a-practical-introduction-to-jq-and-more/"&gt;this recent article&lt;/a&gt; from Sequoia McDowell still has some great tips in it. Well worth a read. One thing that stood out to me from this post was the snippet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I like this pretty-printing/formatting capability so much, I have an alias that formats JSON I've copied (in my OS "clipboard") &amp;amp; puts it back in my clipboard:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alias jsontidy="pbpaste | jq '.' | pbcopy"&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That's crazy-useful, but I need to tweak it a bit. Firstly, as noted, &lt;code&gt;pbcopy&lt;/code&gt; and &lt;code&gt;pbpaste&lt;/code&gt; are mac utils. No worries. We can substitute &lt;code&gt;xclip&lt;/code&gt; on Linux:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;xclip&lt;span class="w"&gt; &lt;/span&gt;-selection&lt;span class="w"&gt; &lt;/span&gt;clipboard&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;xclip&lt;span class="w"&gt; &lt;/span&gt;-selection&lt;span class="w"&gt; &lt;/span&gt;clipboard
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I spotted a minor problem here though: If I run this and the text on my clipboard isn't JSON then &lt;code&gt;jq&lt;/code&gt; will exit with a non-zero code, output something like &lt;code&gt;parse error: Invalid numeric literal at line 1, column 6&lt;/code&gt; to stderr and nothing to stdout. Pipe doesn't care about the non-zero exit code though so we overwrite whatever was on the clipboard with an empty string. So lets add a bit of error handing:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;jsontidy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"xclip -selection clipboard -o | (jq '.' || xclip -selection clipboard -o) | xclip -selection clipboard"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now &lt;code&gt;jsontidy&lt;/code&gt; will format whatever is on the clipboard if it can parse as JSON but leave it alone otherwise.&lt;/p&gt;</description><category>json</category><category>terminal</category><guid>https://chris48s.github.io/blogmarks/posts/2021/jsontidy/</guid><pubDate>Thu, 07 Jan 2021 00:00:00 GMT</pubDate></item><item><title>A python CLI app which accepts input from stdin or a file</title><link>https://chris48s.github.io/blogmarks/posts/2020/stdin-or-file/</link><dc:creator>chris48s</dc:creator><description>&lt;p&gt;This excellent guide on &lt;a href="https://clig.dev/"&gt;Command Line Interface Guidelines&lt;/a&gt; has been shared widely over the last few days and it includes a huge variety of advice on writing elegant and well-behaved command line tools. The whole thing is well worth a read, but I'm going to pick out one quote to focus on in this post:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;If your command is expecting to have something piped to it and stdin is an interactive terminal, display help immediately and quit.&lt;/strong&gt; This means it doesn't just hang, like &lt;code&gt;cat&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Tools that can optionally accept input via pipe are very useful and this pattern is entirely possible with python and argparse, but not completely obvious. Here's a simple example of a python program which:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can accept input as a file: &lt;code&gt;./myscript.py /path/to/file.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Can accept input via a pipe: &lt;code&gt;echo 'foo' | ./myscript.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Will print help and exit if invoked interactively with no arguments: &lt;code&gt;./myscript.py&lt;/code&gt; (instead of just hanging and waiting for input)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'A well-behaved CLI app which accepts input from stdin or a file'&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;'file'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Input file, if empty stdin is used'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isatty&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_help&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>python</category><category>terminal</category><guid>https://chris48s.github.io/blogmarks/posts/2020/stdin-or-file/</guid><pubDate>Mon, 07 Dec 2020 00:00:00 GMT</pubDate></item><item><title>Rich</title><link>https://chris48s.github.io/blogmarks/posts/2020/rich/</link><dc:creator>chris48s</dc:creator><description>&lt;p&gt;I gave &lt;a href="https://github.com/willmcgugan/rich"&gt;Rich&lt;/a&gt; a spin recently and its an absolute game-changer when it comes to building nice looking terminal interfaces in python. Rich provides elegant high-level abstractions for using colours, tables, markdown and more. See the &lt;a href="https://github.com/willmcgugan/rich/blob/master/README.md"&gt;README&lt;/a&gt; and &lt;a href="https://rich.readthedocs.io/en/latest/"&gt;API docs&lt;/a&gt; for a more detailed showcase of Rich's capabilities.&lt;/p&gt;</description><category>python</category><category>terminal</category><guid>https://chris48s.github.io/blogmarks/posts/2020/rich/</guid><pubDate>Tue, 10 Nov 2020 00:00:00 GMT</pubDate></item><item><title>Glob Pattern tester</title><link>https://chris48s.github.io/blogmarks/posts/2020/glob/</link><dc:creator>chris48s</dc:creator><description>&lt;p&gt;Little glob pattens are everywhere, but non-trivial ones can be tricky to construct. Digital Ocean have put together this &lt;a href="https://www.digitalocean.com/community/tools/glob"&gt;handy tool&lt;/a&gt; for constructing glob patterns and testing them against lists of strings. This does for glob patterns what &lt;a href="https://regexr.com/"&gt;regexr&lt;/a&gt; does for regular expressions.&lt;/p&gt;</description><category>terminal</category><guid>https://chris48s.github.io/blogmarks/posts/2020/glob/</guid><pubDate>Sun, 01 Nov 2020 00:00:00 GMT</pubDate></item><item><title>Using find -exec</title><link>https://chris48s.github.io/blogmarks/posts/2020/find-exec/</link><dc:creator>chris48s</dc:creator><description>&lt;p&gt;&lt;a href="https://www.gnu.org/software/findutils/"&gt;Find&lt;/a&gt; has a useful option &lt;code&gt;-exec&lt;/code&gt; which can be used to run a command on each file found. It has a couple of slightly obscure details to the syntax:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt; is a placeholder for the filename.&lt;/li&gt;
&lt;li&gt;The command we are running with &lt;code&gt;-exec&lt;/code&gt; needs to be terminated with a semicolon as there may be further arguments to find after it. This needs to be escaped as &lt;code&gt;\;&lt;/code&gt; or &lt;code&gt;';'&lt;/code&gt;, otherwise it will be interpreted as the end of the &lt;code&gt;find&lt;/code&gt; command.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is also possible to pass the &lt;code&gt;-exec&lt;/code&gt; argument multiple times&lt;/p&gt;
&lt;p&gt;Stringing this together allows us to assemble some elegant one-liners, for example:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="c1"&gt;# delete log files more than 60 days old&lt;/span&gt;
find&lt;span class="w"&gt; &lt;/span&gt;./logs&lt;span class="w"&gt; &lt;/span&gt;-mtime&lt;span class="w"&gt; &lt;/span&gt;+60&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'*.log'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-exec&lt;span class="w"&gt; &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\;&lt;/span&gt;

&lt;span class="c1"&gt;# print the name and (array/object) length of all JSON files&lt;/span&gt;
find&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'*.json'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-exec&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;&lt;span class="se"&gt;\:\ &lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-exec&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'. | length'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\;&lt;/span&gt;

&lt;span class="c1"&gt;# recursively change permissions on files (ignore directories)&lt;/span&gt;
find&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;-type&lt;span class="w"&gt; &lt;/span&gt;f&lt;span class="w"&gt; &lt;/span&gt;-exec&lt;span class="w"&gt; &lt;/span&gt;chmod&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;644&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>terminal</category><guid>https://chris48s.github.io/blogmarks/posts/2020/find-exec/</guid><pubDate>Mon, 05 Oct 2020 23:00:00 GMT</pubDate></item><item><title>Post JSON to an API with curl</title><link>https://chris48s.github.io/blogmarks/posts/2020/curl-json/</link><dc:creator>chris48s</dc:creator><description>&lt;p&gt;Increasingly this is becoming just a place to store snippets and one-liners that are a bit too long to remember.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;curl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://my-api/endpoint"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-X&lt;span class="w"&gt; &lt;/span&gt;POST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Accept: application/json"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Authorization: f00ba2"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--data&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'{"my": "payload", "foo": "bar"}'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--include
&lt;/pre&gt;&lt;/div&gt;</description><category>curl</category><category>json</category><category>terminal</category><guid>https://chris48s.github.io/blogmarks/posts/2020/curl-json/</guid><pubDate>Tue, 22 Sep 2020 23:00:00 GMT</pubDate></item><item><title>Crontab.guru</title><link>https://chris48s.github.io/blogmarks/posts/2020/crontab-guru/</link><dc:creator>chris48s</dc:creator><description>&lt;p&gt;It doesn't matter how long I use it for, crontab syntax is one of those things is one of those things I just can't commit to memory. It's not &lt;em&gt;complicated&lt;/em&gt;, just somewhat unintuitive. Fortunately &lt;a href="https://crontab.guru/"&gt;crontab.guru&lt;/a&gt; is a crontab syntax checker which translates crontab expressions into natural language.&lt;/p&gt;</description><category>terminal</category><guid>https://chris48s.github.io/blogmarks/posts/2020/crontab-guru/</guid><pubDate>Wed, 16 Sep 2020 23:00:00 GMT</pubDate></item></channel></rss>